/*
   Author:  Gerard Visser
   e-mail:  visser.gerard(at)gmail.com

   Copyright (C) 2015 Gerard Visser.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include <string.h>
#include <lombok/base/errors.h>
#include <lombok/base/mem.h>
#include "dac.h"

REFL_IMPL (dac_t, object_t)

static const uint8_t defaultPalette[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x2A, 0x00, 0x00, 0x2A, 0x2A, 0x2A, 0x00, 0x00, 0x2A, 0x00, 0x2A, 0x2A, 0x15, 0x00, 0x2A, 0x2A, 0x2A,
  0x15, 0x15, 0x15, 0x15, 0x15, 0x3F, 0x15, 0x3F, 0x15, 0x15, 0x3F, 0x3F, 0x3F, 0x15, 0x15, 0x3F, 0x15, 0x3F, 0x3F, 0x3F, 0x15, 0x3F, 0x3F, 0x3F,
  0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x0D, 0x0D, 0x0D, 0x11, 0x11, 0x11, 0x15, 0x15, 0x15, 0x19, 0x19, 0x19, 0x1D, 0x1D, 0x1D,
  0x22, 0x22, 0x22, 0x26, 0x26, 0x26, 0x2A, 0x2A, 0x2A, 0x2E, 0x2E, 0x2E, 0x32, 0x32, 0x32, 0x37, 0x37, 0x37, 0x3B, 0x3B, 0x3B, 0x3F, 0x3F, 0x3F,
  0x00, 0x00, 0x3F, 0x10, 0x00, 0x3F, 0x20, 0x00, 0x3F, 0x2F, 0x00, 0x3F, 0x3F, 0x00, 0x3F, 0x3F, 0x00, 0x2F, 0x3F, 0x00, 0x20, 0x3F, 0x00, 0x10,
  0x3F, 0x00, 0x00, 0x3F, 0x10, 0x00, 0x3F, 0x20, 0x00, 0x3F, 0x2F, 0x00, 0x3F, 0x3F, 0x00, 0x2F, 0x3F, 0x00, 0x20, 0x3F, 0x00, 0x10, 0x3F, 0x00,
  0x00, 0x3F, 0x00, 0x00, 0x3F, 0x10, 0x00, 0x3F, 0x20, 0x00, 0x3F, 0x2F, 0x00, 0x3F, 0x3F, 0x00, 0x2F, 0x3F, 0x00, 0x20, 0x3F, 0x00, 0x10, 0x3F,
  0x20, 0x20, 0x3F, 0x27, 0x20, 0x3F, 0x2F, 0x20, 0x3F, 0x37, 0x20, 0x3F, 0x3F, 0x20, 0x3F, 0x3F, 0x20, 0x37, 0x3F, 0x20, 0x2F, 0x3F, 0x20, 0x27,
  0x3F, 0x20, 0x20, 0x3F, 0x27, 0x20, 0x3F, 0x2F, 0x20, 0x3F, 0x37, 0x20, 0x3F, 0x3F, 0x20, 0x37, 0x3F, 0x20, 0x2F, 0x3F, 0x20, 0x27, 0x3F, 0x20,
  0x20, 0x3F, 0x20, 0x20, 0x3F, 0x27, 0x20, 0x3F, 0x2F, 0x20, 0x3F, 0x37, 0x20, 0x3F, 0x3F, 0x20, 0x37, 0x3F, 0x20, 0x2F, 0x3F, 0x20, 0x27, 0x3F,
  0x2F, 0x2F, 0x3F, 0x33, 0x2F, 0x3F, 0x37, 0x2F, 0x3F, 0x3B, 0x2F, 0x3F, 0x3F, 0x2F, 0x3F, 0x3F, 0x2F, 0x3B, 0x3F, 0x2F, 0x37, 0x3F, 0x2F, 0x33,
  0x3F, 0x2F, 0x2F, 0x3F, 0x33, 0x2F, 0x3F, 0x37, 0x2F, 0x3F, 0x3B, 0x2F, 0x3F, 0x3F, 0x2F, 0x3B, 0x3F, 0x2F, 0x37, 0x3F, 0x2F, 0x33, 0x3F, 0x2F,
  0x2F, 0x3F, 0x2F, 0x2F, 0x3F, 0x33, 0x2F, 0x3F, 0x37, 0x2F, 0x3F, 0x3B, 0x2F, 0x3F, 0x3F, 0x2F, 0x3B, 0x3F, 0x2F, 0x37, 0x3F, 0x2F, 0x33, 0x3F,
  0x00, 0x00, 0x20, 0x08, 0x00, 0x20, 0x10, 0x00, 0x20, 0x18, 0x00, 0x20, 0x20, 0x00, 0x20, 0x20, 0x00, 0x18, 0x20, 0x00, 0x10, 0x20, 0x00, 0x08,
  0x20, 0x00, 0x00, 0x20, 0x08, 0x00, 0x20, 0x10, 0x00, 0x20, 0x18, 0x00, 0x20, 0x20, 0x00, 0x18, 0x20, 0x00, 0x10, 0x20, 0x00, 0x08, 0x20, 0x00,
  0x00, 0x20, 0x00, 0x00, 0x20, 0x08, 0x00, 0x20, 0x10, 0x00, 0x20, 0x18, 0x00, 0x20, 0x20, 0x00, 0x18, 0x20, 0x00, 0x10, 0x20, 0x00, 0x08, 0x20,
  0x10, 0x10, 0x20, 0x14, 0x10, 0x20, 0x18, 0x10, 0x20, 0x1C, 0x10, 0x20, 0x20, 0x10, 0x20, 0x20, 0x10, 0x1C, 0x20, 0x10, 0x18, 0x20, 0x10, 0x14,
  0x20, 0x10, 0x10, 0x20, 0x14, 0x10, 0x20, 0x18, 0x10, 0x20, 0x1C, 0x10, 0x20, 0x20, 0x10, 0x1C, 0x20, 0x10, 0x18, 0x20, 0x10, 0x14, 0x20, 0x10,
  0x10, 0x20, 0x10, 0x10, 0x20, 0x14, 0x10, 0x20, 0x18, 0x10, 0x20, 0x1C, 0x10, 0x20, 0x20, 0x10, 0x1C, 0x20, 0x10, 0x18, 0x20, 0x10, 0x14, 0x20,
  0x18, 0x18, 0x20, 0x1A, 0x18, 0x20, 0x1C, 0x18, 0x20, 0x1E, 0x18, 0x20, 0x20, 0x18, 0x20, 0x20, 0x18, 0x1E, 0x20, 0x18, 0x1C, 0x20, 0x18, 0x1A,
  0x20, 0x18, 0x18, 0x20, 0x1A, 0x18, 0x20, 0x1C, 0x18, 0x20, 0x1E, 0x18, 0x20, 0x20, 0x18, 0x1E, 0x20, 0x18, 0x1C, 0x20, 0x18, 0x1A, 0x20, 0x18,
  0x18, 0x20, 0x18, 0x18, 0x20, 0x1A, 0x18, 0x20, 0x1C, 0x18, 0x20, 0x1E, 0x18, 0x20, 0x20, 0x18, 0x1E, 0x20, 0x18, 0x1C, 0x20, 0x18, 0x1A, 0x20,
  0x00, 0x00, 0x10, 0x04, 0x00, 0x10, 0x08, 0x00, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x0C, 0x10, 0x00, 0x08, 0x10, 0x00, 0x04,
  0x10, 0x00, 0x00, 0x10, 0x04, 0x00, 0x10, 0x08, 0x00, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x00, 0x0C, 0x10, 0x00, 0x08, 0x10, 0x00, 0x04, 0x10, 0x00,
  0x00, 0x10, 0x00, 0x00, 0x10, 0x04, 0x00, 0x10, 0x08, 0x00, 0x10, 0x0C, 0x00, 0x10, 0x10, 0x00, 0x0C, 0x10, 0x00, 0x08, 0x10, 0x00, 0x04, 0x10,
  0x08, 0x08, 0x10, 0x0A, 0x08, 0x10, 0x0C, 0x08, 0x10, 0x0E, 0x08, 0x10, 0x10, 0x08, 0x10, 0x10, 0x08, 0x0E, 0x10, 0x08, 0x0C, 0x10, 0x08, 0x0A,
  0x10, 0x08, 0x08, 0x10, 0x0A, 0x08, 0x10, 0x0C, 0x08, 0x10, 0x0E, 0x08, 0x10, 0x10, 0x08, 0x0E, 0x10, 0x08, 0x0C, 0x10, 0x08, 0x0A, 0x10, 0x08,
  0x08, 0x10, 0x08, 0x08, 0x10, 0x0A, 0x08, 0x10, 0x0C, 0x08, 0x10, 0x0E, 0x08, 0x10, 0x10, 0x08, 0x0E, 0x10, 0x08, 0x0C, 0x10, 0x08, 0x0A, 0x10,
  0x0C, 0x0C, 0x10, 0x0D, 0x0C, 0x10, 0x0E, 0x0C, 0x10, 0x0F, 0x0C, 0x10, 0x10, 0x0C, 0x10, 0x10, 0x0C, 0x0F, 0x10, 0x0C, 0x0E, 0x10, 0x0C, 0x0D,
  0x10, 0x0C, 0x0C, 0x10, 0x0D, 0x0C, 0x10, 0x0E, 0x0C, 0x10, 0x0F, 0x0C, 0x10, 0x10, 0x0C, 0x0F, 0x10, 0x0C, 0x0E, 0x10, 0x0C, 0x0D, 0x10, 0x0C,
  0x0C, 0x10, 0x0C, 0x0C, 0x10, 0x0D, 0x0C, 0x10, 0x0E, 0x0C, 0x10, 0x0F, 0x0C, 0x10, 0x10, 0x0C, 0x0F, 0x10, 0x0C, 0x0E, 0x10, 0x0C, 0x0D, 0x10,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

dac_t::dac_t (void) {
  ___CBTPUSH;

  m_palette = (uint8_t*) mem_allocate ("uint8_t[]", 768, PTYPE_INTERNAL);
  memcpy (m_palette, defaultPalette, 768);

  ___CBTPOP;
}

dac_t::~dac_t (void) {
  ___CBTPUSH;

  mem_release (m_palette);

  ___CBTPOP;
}

void dac_t::getColour (colour_t* colour, int index) const {
  ___CBTPUSH;

  int i = 3 * index;
  colour->red = m_palette[i] / 63.0;
  colour->green = m_palette[i + 1] / 63.0;
  colour->blue = m_palette[i + 2] / 63.0;
  colour->alpha = 1;

  ___CBTPOP;
}

void dac_t::getRGB (uint8_t* rgb, int index) const {
  ___CBTPUSH;

  int i = 3 * index;
  for (int j = 0; j < 3; ++j) {
    rgb[j] = m_palette[i + j];
  }

  ___CBTPOP;
}

void dac_t::setRGB (int index, uint8_t* rgb) {
  ___CBTPUSH;

  int i = 3 * index;
  for (int j = 0; j < 3; ++j) {
    m_palette[i + j] = rgb[j] & 0x3F;
  }

  ___CBTPOP;
}
